# -*- coding: utf-8 -*-
"""Toxic v Nontoxic Plants.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jx7sSl7U4sePuGldHHjViVQHj6Yzmc83
"""

# TensorFlow and tf.keras
import tensorflow as tf

# Helper libraries
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

from google.colab import drive
drive.mount('/content/drive')

!ls drive/MyDrive/Plant_Dataset/tpc-imgs 
import os
for dirpath, dirnames, filenames in os.walk("drive/MyDrive/Plant_Dataset/tpc-imgs"):
  print(f"There are {len (dirnames)} directories and {len(filenames)} images in '{dirpath}")

#Getting class names programmatically
import pathlib
import numpy as np
data_dir = pathlib.Path("/content/drive/MyDrive/Plant_Dataset/tpc-imgs/training")
class_names = np.array(sorted([item.name for item in data_dir.glob("*")]))
class_names

#view random image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import random

def view_random_image (target_dir, target_class):
  #Set up the target directory
  target_folder = target_dir+target_class
  #get random image
  random_image = random.sample (os.listdir (target_folder), 1)
  print(random_image)
  #read in image and plot
  image = mpimg.imread (target_folder + "/" + random_image[0])
  plt.imshow(image)
  plt.title(target_class)
  plt.axis ("off")
  print(f"Image shape: {image.shape}") #show us tensor
  return image

#view ranodm image
img = view_random_image ("/content/drive/MyDrive/Plant_Dataset/tpc-imgs/training", '/toxic')

"""an end-to-end example
Load images, prerpocess, build CNN, compile CN fit the CNN
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
tf.random.set_seed (30)

import cv2
import os
image_x = 250
image_y = 250
train_dir = "/content/drive/MyDrive/Plant_Dataset/tpc-imgs/training/"
test_dir= "/content/drive/MyDrive/Plant_Dataset/tpc-imgs/test/"
X = []
y = []

for folder in ['toxic', 'nontoxic']:
  for img in os.listdir(train_dir+folder):
    img_file = cv2.imread(train_dir + folder + '/'+img)
    img_resized = cv2.resize(img_file, (image_x, image_y))
    X.append(img_resized)
    if folder == 'toxic':
      y.append(0)
    if folder == 'nontoxic':
      y.append(1)

train_data = np.asarray(X).astype('float32')
train_data_y = np.asarray(y).astype('float32')
  
X = []
y = []
for folder in ['toxic', 'nontoxic']:
  
  for img in os.listdir(test_dir+folder):
    img_file = cv2.imread(test_dir + folder  + '/'+img)
    img_resized = cv2.resize(img_file, (image_x, image_y))
    X.append(img_resized)
    if folder == 'toxic':
      y.append(0)
    if folder == 'nontoxic':
      y.append(1)

test_data = np.asarray(X).astype('float32')
test_data_y = np.asarray(y).astype('float32')

#train_datagen = ImageDataGenerator(rescale=(1./225))
#valid_datagen = ImageDataGenerator(rescale=(1./225))

#image_x = 257
#image_y = 257

#set up paths

#import data
#train_data = train_datagen.flow_from_directory(train_dir,
#                                                batch_size=64,
#                                                class_mode="binary",
#                                                seed=30)

#valid_data = valid_datagen.flow_from_directory(test_dir,
#                                                batch_size=64,
#                                               target_size=(image_x, image_y),
 #                                               class_mode="binary",
 #                                               seed=30)
#build a CNN
model_1 = tf.keras.Sequential( [
tf.keras.layers.Conv2D(filters=10,
                        kernel_size=3,
                        activation="relu",
                        input_shape=(image_x, image_y,3)),
  tf.keras.layers.Conv2D(10, 3, activation="relu"),

  tf.keras.layers.MaxPool2D(pool_size=2,
                            padding="valid"),

  tf.keras.layers.Conv2D(10, 3, activation="relu"),

  tf.keras.layers.Conv2D(10, 3, activation="relu"),

  tf.keras.layers.MaxPool2D(2),

  tf.keras.layers.Flatten(),

  tf.keras.layers.Dense(1, activation="sigmoid")
])

#compile the model
model_1.compile(loss=tf.keras.losses.BinaryCrossentropy(),
                optimizer=tf.keras.optimizers.Adam(),
                metrics=["accuracy"])

history_1 = model_1.fit(train_data,
                        train_data_y,
                        epochs=15,
                        steps_per_epoch=len(train_data),
                        validation_data=(test_data, test_data_y))
                        #validation_steps=len(test_data))

test_img = test_data[127]

from google.colab.patches import cv2_imshow
cv2_imshow(test_img)

model_1.summary()

test_img = np.asarray(test_img.reshape(-1, image_x, image_y, 3))
print(model_1.predict([test_img]))

#model_1.evaluate(test_data,test_data_y)

model_1.summary()